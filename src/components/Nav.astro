---
import { Icon } from 'astro-icon';
import ThemeToggle from './ThemeToggle.astro';

/** Main menu items; Icons/links to social media */
import { navigationLinks, socialLinks } from '../links.ts';
---

<nav>
	<div class="menu-header">
		<a href="/" class="site-title">
			<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" width="3.5em" height="3.5em" version="1.1" viewBox="0 0 19303.62 19303.62">
				<path d="M3810.62 5992.16c-2633.26,2396.84 -832.07,5526.3 1830.7,6720.88 188.03,84.35 696.52,240.21 1417.97,347.76 -10.92,1494.29 -108.74,1721.25 486.17,1800.53 515.73,-107.4 714.59,-475.78 655.26,-1693.59 193.94,7.79 395.47,10.78 603.61,7.62 453.23,1336.37 771.47,1804.25 1685.34,1804.25 820.73,0 1313.94,-579.42 1376.06,-2333.78 1882.55,-622.79 3011.88,-1999.79 3773.97,-3843.38 298.97,290.65 2182.73,1957.21 2220.45,879.56 37.53,-809.81 -338.63,-2473.31 -783.72,-3144.81 -564.6,-738.81 -1107.85,-86.42 -1297.06,560.02 -97.76,313.39 -198.89,599.08 -311.48,869.73 -3410.8,-2164.33 -8842.57,-4306.94 -11657.27,-1974.79zm1601.55 1193.33c668.92,0 1211.19,544.94 1211.19,1217.12 0,672.23 -542.27,1217.15 -1211.19,1217.15 -668.98,0 -1211.24,-544.91 -1211.24,-1217.15 0,-672.18 542.26,-1217.12 1211.24,-1217.12z"/>
			</svg>
			<!-- <img src="/logo.svg" width="60em" /> -->
			RybaNata.Art
		</a>
		<menu-button>
			<template>
				<button class="menu-button" aria-expanded="false">
					<span class="sr-only">Menu</span>
					<Icon name="typcn:th-menu" size="1.2em" />
				</button>
			</template>
		</menu-button>
	</div>
	<noscript>
		<ul class="nav-items">
			{
				navigationLinks.map(({ label, href }) => (
					<li>
						<a
							aria-current={Astro.url.pathname === href}
							class:list={[
								'link',
								{
									active:
										Astro.url.pathname === href ||
										(href !== '/' && Astro.url.pathname.startsWith(href)),
								},
							]}
							href={href}
						>
							{label}
						</a>
					</li>
				))
			}
		</ul>
	</noscript>
	<noscript>
		<div class="menu-footer">
			<div class="socials">
				{
					socialLinks.map(({ href, icon, label }) => (
						<a href={href} class="social">
							<span class="sr-only">{label}</span>
							<Icon name={icon} size="1.2em" class="social" />
						</a>
					))
				}
			</div>
		</div>
	</noscript>
	<div id="menu-content" hidden>
		<ul class="nav-items">
			{
				navigationLinks.map(({ label, href }) => (
					<li>
						<a
							aria-current={Astro.url.pathname === href}
							class:list={[
								'link',
								{
									active:
										Astro.url.pathname === href ||
										(href !== '/' && Astro.url.pathname.startsWith(href)),
								},
							]}
							href={href}
						>
							{label}
						</a>
					</li>
				))
			}
		</ul>
		<div class="menu-footer">
			<div class="socials">
				{
					socialLinks.map(({ href, icon, label }) => (
						<a href={href} class="social">
							<span class="sr-only">{label}</span>
							<Icon name={icon} size="1.1em" class="social" />
						</a>
					))
				}
			</div>

			<div class="theme-toggle">
				<ThemeToggle />
			</div>
		</div>
	</div>
</nav>

<script>
	class MenuButton extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(this.querySelector('template')!.content.cloneNode(true));
			const btn = this.querySelector('button')!;

			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById('menu-content')!;
			menu.hidden = true;
			// Add "menu-content" class in JS to avoid covering content in non-JS browsers.
			menu.classList.add('menu-content');

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener('click', () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia('(min-width: 50em)');
			handleViewports(mediaQueries);
			mediaQueries.addEventListener('change', handleViewports);
		}
	}
	customElements.define('menu-button', MenuButton);
</script>

<style>
	@font-face {
		font-family: 'comic';
		src: url('/fonts/comic.ttf') format('truetype');
		font-weight: normal;
		font-style: normal;
		font-display: swap;
	}

	nav {
		z-index: 9999;
		position: relative;
		font-family: var(--font-brand);
		font-weight: 500;
		margin-bottom: 3.5rem;
	}

	.menu-header {
		display: flex;
		justify-content: space-between;
		gap: 0.5rem;
		padding: 1.5rem;
	}

	.menu-header svg {
		fill: var(--accent-regular);
		transition: fill var(--theme-transition);
	}

	.menu-header:hover svg,
	.menu-header:focus svg{
		fill: var(--accent-dark-extra);
	}

	.site-title {
		font-family: comic, "Comic Sans MS", "Comic Sans", cursive;
		font-weight: bold;
		display: flex;
		gap: 0.5rem;
		align-items: center;
		line-height: 1.1;
		color: var(--gray-0);
		text-decoration: none;
	}

	.menu-button {
		position: relative;
		display: flex;
		border: 0;
		/* border-radius: 999rem; */
		padding: 0.5rem;
		font-size: 1.5rem;
		color: var(--gray-300);
		background: none;
		/* box-shadow: var(--shadow-md); */
	}

	.menu-button[aria-expanded='true'] {
		color: var(--gray-0);
		background: none;
	}

	.menu-button[hidden] {
		display: none;
	}

	.menu-button::before {
		position: absolute;
		inset: -1px;
		content: '';
		background: none;
		border-radius: 999rem;
		z-index: -1;
	}

	.menu-content {
		position: absolute;
		left: 0;
		right: 0;
	}

	.nav-items {
		margin: 0;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		font-size: var(--text-md);
		line-height: 1.2;
		list-style: none;
		padding: 2rem;
		background-color: var(--gray-999);
		border-bottom: 1px solid var(--gray-800);
	}

	.link {
		display: inline-block;
		color: var(--gray-300);
		text-decoration: none;
	}

	.link.active {
		color: var(--gray-0);
	}

	.menu-footer {
		--icon-size: var(--text-xl);
		--icon-padding: 0.5rem;

		display: flex;
		justify-content: space-between;
		gap: 0.75rem;
		padding: 1.5rem 2rem 1.5rem 1.5rem;
		background-color: var(--gray-999);
		border-radius: 0 0 0.75rem 0.75rem;
		box-shadow: var(--shadow-lg);
	}

	.socials {
		display: flex;
		flex-wrap: wrap;
		gap: 0.125rem;
		font-size: 2.2em;
		/* font-size: var(--icon-size); */
	}

	.social {
		display: flex;
		padding: var(--icon-padding);
		text-decoration: none;
		color: var(--accent-regular);
		transition: color var(--theme-transition);
	}

	.social:hover,
	.social:focus {
		color: var(--accent-dark-extra);
	}

	.theme-toggle {
		display: flex;
		align-items: center;
		height: calc(var(--icon-size) + 2 * var(--icon-padding));
	}

	@media (min-width: 50em) {
		nav {
			display: grid;
			grid-template-columns: 1fr auto 1fr;
			align-items: center;
			padding: 2.5rem 5rem;
			gap: 1rem;
		}

		.menu-header {
			padding: 0;
		}

		.site-title {
			font-size: var(--text-lg);
		}

		.menu-content {
			display: contents;
		}

		.nav-items {
			border-bottom: none;
			position: relative;
			flex-direction: row;
		}

		.link {
			padding: 0.5rem 1rem;
			border-radius: 999rem;
			transition:
				color var(--theme-transition),
				background-color var(--theme-transition);
		}

		.link:hover,
		.link:focus {
			color: var(--gray-100);
			background-color: var(--accent-subtle-overlay);
		}

		.link.active {
			color: var(--accent-text-over);
			background-color: var(--accent-regular);
		}

		.menu-footer {
			--icon-padding: 0.375rem;

			justify-self: flex-end;
			align-items: center;
			padding: 0;
			background-color: transparent;
			box-shadow: none;
		}

		.socials {
			display: none;
		}
	}

	@media (min-width: 60em) {
		.socials {
			display: flex;
			justify-content: flex-end;
			gap: 0;
		}
	}
	@media (forced-colors: active) {
		.link.active {
			color: SelectedItem;
		}
	}
</style>
